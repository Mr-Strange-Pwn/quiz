{"version":3,"sources":["components/questions.js","components/quiz.js","App.js","serviceWorker.js","index.js"],"names":["Questions","index","length","category","difficulty","question","correctAns","incorrectAns","progressbar","setScore","React","useState","clickedAns","setClickedAns","optionClicked","setOptionClicked","checkanswer","answer","questionNO","console","log","className","level","role","aria-label","deficulty","allAns","push","i","unescape","allOPtions","map","onClick","disabled","OPtions","to","Quiz","progress","setprogress","correctanswers","setcorrectanswers","score","setscore","questions","queno","questionNo","style","width","aria-valuenow","aria-valuemin","aria-valuemax","exact","path","que","key","correct_answer","incorrect_answers","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20519c1a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Questions({\r\n  index,\r\n  length,\r\n  category,\r\n  difficulty,\r\n  question,\r\n  correctAns,\r\n  incorrectAns,\r\n  progressbar,\r\n  setScore,\r\n}) {\r\n  const deficulty = (level) => {\r\n    switch (level) {\r\n      case \"hard\":\r\n        return (\r\n          <span role=\"img\" aria-label=\"\">\r\n            ⭐⭐⭐\r\n          </span>\r\n        );\r\n      case \"medium\":\r\n        return (\r\n          <span role=\"img\" aria-label=\"\">\r\n            ⭐⭐\r\n          </span>\r\n        );\r\n      case \"easy\":\r\n        return (\r\n          <span role=\"img\" aria-label=\"\">\r\n            ⭐\r\n          </span>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const [clickedAns, setClickedAns] = React.useState('')\r\n  const [optionClicked, setOptionClicked] = React.useState(false)\r\n\r\n  const checkanswer = (answer) => {\r\n    let questionNO = index + 1\r\n    console.log(`selected answer \"${answer} , correct ans \"${correctAns}\"`)\r\n    if (answer === correctAns) {\r\n      setClickedAns(\"correct !\")\r\n      setOptionClicked(true)\r\n      setScore(questionNO)\r\n    }\r\n    else {\r\n      setClickedAns(\"sorry !\")\r\n      setOptionClicked(true)\r\n    }\r\n  }\r\n\r\n  const OPtions = (correctAns, incorrectAns) => {\r\n    let allAns = []\r\n    allAns.push(correctAns)\r\n\r\n    for (let i = 0; i < incorrectAns.length; i++) {\r\n      allAns.push(unescape(incorrectAns[i]))\r\n    }\r\n\r\n    console.log(\"all answers\", allAns)\r\n\r\n    let allOPtions = allAns.map((answer, index) => {\r\n      return (\r\n        <button onClick={() => checkanswer(answer)} disabled={optionClicked} >\r\n          {\" \"}\r\n          {answer}\r\n        </button>\r\n      )\r\n    })\r\n\r\n    return <div className=\"col ansewrwraper\" >{allOPtions}</div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-3 mb-3\">\r\n      <div className=\"question\">\r\n        <h2 className=\"pl-2 mb-4\">\r\n          {\" \"}\r\n          Question {index + 1} of {length}\r\n        </h2>\r\n        <p className=\"pl-2\">{category}</p>\r\n        <div className=\"pl-2 mb-4\">{deficulty(difficulty)}</div>\r\n        <div>\r\n          <h5 className=\"pl-2 mb-4\">{question}</h5>\r\n        </div>\r\n        <div className=\"question_options\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              {/* <div className=\"col ansewrwraper\">\r\n                <button onClick={() => checkanswer(index, correctAns)}>\r\n                  {\" \"}\r\n                  {correctAns}\r\n                </button>\r\n              </div>\r\n              {incorrectAns.map((ans, i) => (\r\n                <div className=\"col ansewrwraper\" key={i}>\r\n                  <button onClick={() => checkanswer(index, ans)}>\r\n                    {\" \"}\r\n                    {unescape(ans)}\r\n                  </button>\r\n                </div>\r\n              ))} */}\r\n\r\n              {\r\n                OPtions(correctAns, incorrectAns)\r\n              }\r\n            </div>\r\n            {\r\n              optionClicked ? (<div className=\"choice\">\r\n                <h3>{clickedAns}</h3>\r\n                <Link to={`/${index + 2}`}>\r\n                  <button onClick={() => progressbar(index + 2)}>\r\n                    next question\r\n                </button>\r\n                </Link>\r\n              </div>) : null\r\n            }\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Questions;\r\n","import React, { useState } from \"react\";\r\nimport Questions from \"./questions\";\r\nimport { Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport questions from \"../questions.json\";\r\n\r\nfunction Quiz() {\r\n  const [progress, setprogress] = useState(0);\r\n  const [correctanswers, setcorrectanswers] = useState(0);\r\n  const [score, setscore] = useState(0);\r\n  console.log(\"que\", questions);\r\n\r\n  const progressbar = (queno) => {\r\n    let progress = (queno / questions.length) * 100;\r\n    setprogress(progress);\r\n  };\r\n\r\n  const setScore = (questionNo) => {\r\n\r\n    setcorrectanswers(correctanswers + 1);\r\n    let score = (correctanswers / questions.length) * 100;\r\n    setscore(score);\r\n    console.log(score, questionNo)\r\n\r\n  };\r\n\r\n  console.log(\"score\", score);\r\n  return (\r\n    <div>\r\n      <div className=\"container mt-1\">\r\n        <div className=\"progress\">\r\n          <div\r\n            className=\"progress-bar bg-success\"\r\n            role=\"progressbar\"\r\n            style={{ width: `${progress}%` }}\r\n            aria-valuenow=\"25\"\r\n            aria-valuemin=\"0\"\r\n            aria-valuemax=\"100\"></div>\r\n        </div>\r\n      </div>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <div className=\"option_container\">\r\n            <h5 className=\"mb-5\">Welcome to Quiz</h5>\r\n            <Link to=\"/1\">\r\n              <button onClick={() => progressbar(1)}>lets Start !</button>\r\n            </Link>\r\n          </div>\r\n        </Route>\r\n        {questions.map((que, index) => {\r\n          return (\r\n            <Route path={`/${index + 1}`}>\r\n              <Questions\r\n                key={index}\r\n                index={index}\r\n                length={questions.length}\r\n                category={unescape(que.category)}\r\n                difficulty={que.difficulty}\r\n                question={unescape(que.question)}\r\n                correctAns={unescape(que.correct_answer)}\r\n                incorrectAns={que.incorrect_answers}\r\n                progressbar={progressbar}\r\n                setScore={setScore}\r\n              />\r\n            </Route>\r\n          );\r\n        })}\r\n        <Route>\r\n          <div className=\"option_container\">\r\n            <h3> your Score is : {score}</h3>\r\n\r\n            <h5 className=\"mb-5\">Restart</h5>\r\n            <Link to=\"/\">\r\n              <button onClick={() => { progressbar(0); setscore(0) }}>lets Start !</button>\r\n            </Link>\r\n          </div>\r\n        </Route>\r\n      </Switch>\r\n\r\n      <div className=\"container\">\r\n        <h5>Score: {score}</h5>\r\n        <div className=\"progress\">\r\n          <div\r\n            className=\"progress-bar bg-success\"\r\n            role=\"progressbar\"\r\n            style={{ width: `${score}%` }}\r\n            aria-valuenow=\"25\"\r\n            aria-valuemin=\"0\"\r\n            aria-valuemax=\"100\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Quiz from \"./components/quiz\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"\">\n        <Router>\n          <Quiz />\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  window.fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}